<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Adventures in Programming]]></title>
  <link href="http://statonjr.github.com/atom.xml" rel="self"/>
  <link href="http://statonjr.github.com/"/>
  <updated>2012-03-16T15:15:54-04:00</updated>
  <id>http://statonjr.github.com/</id>
  <author>
    <name><![CDATA[Larry Staton Jr.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[objective-c-literals]]></title>
    <link href="http://statonjr.github.com/blog/2012/03/16/objective-c-literals/"/>
    <updated>2012-03-16T14:09:00-04:00</updated>
    <id>http://statonjr.github.com/blog/2012/03/16/objective-c-literals</id>
    <content type="html"><![CDATA[<p>Mark Dalrymple <a href="http://weblog.bignerdranch.com/?p=398">posts</a> about the new literal syntax in Objective-C. One reason that I prefer MacRuby is Ruby&#8217;s terse syntax for creating literals. With MacRuby, I can create dictionaries the standard Ruby way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">dict</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:foo</span> <span class="o">=&gt;</span> <span class="s2">&quot;bar&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The new literals make creating Objective-C dictionaries (and arrays) easier, but not quite as easy as Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">splunge</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span> <span class="s">@&quot;hi&quot;</span> <span class="o">:</span>  <span class="s">@&quot;bork&quot;</span><span class="p">,</span> <span class="s">@&quot;greeble&quot;</span> <span class="o">:</span>  <span class="s">@&quot;bork&quot;</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not bad and, at first glance, better than the old <code>NSDictionary dictionaryWithObjectsAndKeys:</code>. Check out Mark&#8217;s post for more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[12-factor-app]]></title>
    <link href="http://statonjr.github.com/blog/2012/03/16/12-factor-app/"/>
    <updated>2012-03-16T11:41:00-04:00</updated>
    <id>http://statonjr.github.com/blog/2012/03/16/12-factor-app</id>
    <content type="html"><![CDATA[<p>Richard Schneeman from Heroku will be presenting the <a href="http://www.12factor.net">12 Factor App</a> at the charlotte.rb meeting next Wednesday night at Packard Place. I read through the website and I&#8217;m interested to see how the 12 Factor App compares to how I&#8217;ve architected some of my systems. I&#8217;ve already found a few changes that I should make. I&#8217;m also interested to see how the 12 Factor App differs from an environment like <a href="http://www.torquebox.com">Torquebox</a>, which handles many of these factors for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://statonjr.github.com/blog/2012/03/15/hello-world/"/>
    <updated>2012-03-15T19:49:00-04:00</updated>
    <id>http://statonjr.github.com/blog/2012/03/15/hello-world</id>
    <content type="html"><![CDATA[<p>I write code. I leared to write code at age 10; I wrote BASIC on an Apple IIe. I then moved on to AppleScript, a language that I still use today to boss Mac apps around. At my current job, I write mostly Ruby code, building APIs and other tools for teams inside a large financial institution. While I currently deploy on MRI, I am a big fan of JRuby and I plan to port most of my APIs over to JRuby, so expect several posts on deploying JRuby.</p>

<p>I also write Cocoa and iOS applications for fun and profit. While I write my iOS applications in Objective-C, I write my Cocoa apps with MacRuby. With MacRuby, I get full access to AppKit and Foundation from Ruby, even on the command line, not to mention the ability to create great interfaces in Xcode.</p>

<p>Other languages that I&#8217;m interested in include LISP, Clojure, JavaScript, Factor, and R. I admit that it&#8217;s an eclectic mix, but I trained to be a lawyer, so I never had to learn about functional languages or stack languages. I&#8217;m still baffled my LISP macros, but I vow to conquer them.</p>

<p>My goal for this blog is to contribute what I&#8217;ve learned back to the community. Many people contributed to my success and I hope to return the favor.</p>
]]></content>
  </entry>
  
</feed>
