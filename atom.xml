<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Adventures in Programming]]></title>
  <link href="http://statonjr.github.com/atom.xml" rel="self"/>
  <link href="http://statonjr.github.com/"/>
  <updated>2012-03-25T20:22:05-04:00</updated>
  <id>http://statonjr.github.com/</id>
  <author>
    <name><![CDATA[Larry Staton Jr.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AppleScript and JSON]]></title>
    <link href="http://statonjr.github.com/blog/2012/03/25/applescript-and-json/"/>
    <updated>2012-03-25T20:03:00-04:00</updated>
    <id>http://statonjr.github.com/blog/2012/03/25/applescript-and-json</id>
    <content type="html"><![CDATA[<p>AppleScript is great for bossing around applications on your Mac. Yes, the syntax is wonky and third parties (and Apple!) often botch their dictionaries, but AppleScript is still a very capable language. Except when it comes to text. AppleScript just cannot deal with text well. This weekend, when I wasn&#8217;t bombing around the <a href="http://www.bmwusa.com/standard/content/experience/events/pds/default.aspx">BMW Performance Center</a>, I tried to fetch and parse JSON from a web service with AppleScript. Sadly, AppleScript doesn&#8217;t understand JSON and, because JSON is text, AppleScript doesn&#8217;t deal with it well.</p>

<p>I tried using <code>jsontool</code> via node, but AppleScript didn&#8217;t want to find and load node. I also looked at <a href="http://code.google.com/p/json-helper/">AppleScript JSON Helper</a>, but I try to require my users to download additional software if I can help it. My solution: shell out to Ruby using <code>do shell script</code>. Ruby&#8217;s JSON library is top-notch and makes dealing with JSON a breeze. Here&#8217;s a sample:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='applescript'><span class='line'><span class="k">set</span> <span class="na">name</span> <span class="k">to</span> <span class="nb">do shell script</span> <span class="s2">&quot;ruby -e &#39;require \&quot;rubygems\&quot;;require \&quot;json\&quot;;j=&#39;{&quot;</span><span class="nv">Name</span><span class="s2">&quot;:&quot;</span><span class="nv">John</span> <span class="nv">Doe</span><span class="s2">&quot;}&#39;;data=JSON.parse(j);puts data[\&quot;Name\&quot;]&#39;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s a few things to watch out for here. First, even if you&#8217;re using rbenv or RVM, <code>do shell script</code> uses the system Ruby library, which is version 1.8.7, which means that you&#8217;ll need to <code>require "rubygems"</code> before you load the JSON library. Next, you need to escape the quotes in the <code>require</code>d libraries. Finally, you need to <code>puts</code> the output that you want, so that AppleScript can pick it up.</p>

<p>Once you have the data, you&#8217;re off! Happy AppleScripting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Land of LISP]]></title>
    <link href="http://statonjr.github.com/blog/2012/03/22/land-of-lisp/"/>
    <updated>2012-03-22T05:41:00-04:00</updated>
    <id>http://statonjr.github.com/blog/2012/03/22/land-of-lisp</id>
    <content type="html"><![CDATA[<p>I bought <em>Land of Lisp</em> a year ago when it first came out. I read through the book and did a few examples, but never gave it my full attention. I think the chapter on macros made my head spin a bit and then I got sidetracked. While waiting at the airport this week, I decided to take another look, but this time with my full attention. By &#8220;full attention&#8221;, I mean completing the examples and <em>learning</em> how LISP works. I&#8217;ll blog my notes, too. Look for a blog post soon about getting set up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First iBook]]></title>
    <link href="http://statonjr.github.com/blog/2012/03/18/first-ibook/"/>
    <updated>2012-03-18T19:32:00-04:00</updated>
    <id>http://statonjr.github.com/blog/2012/03/18/first-ibook</id>
    <content type="html"><![CDATA[<p>I created my <a href="http://dl.dropbox.com/u/984383/Exploring%20Evaporation.ibooks">first iBook</a> today for my son&#8217;s third grade science fair project. I didn&#8217;t do anything fancy in iBooks Author; no widgets, for example. I added several photos and one movie that I shot on my iPhone 4 and edited in iMovie. My son and I also created voiceovers for the clips. He really enjoyed the moviemaking.</p>

<p>Using iBooks Author offered few surprises for those who have used Pages or iWeb. The interface elements and inspectors should be very familiar. I had no trouble getting up and running immediately. Adding media is a simple drag-and-drop operation. I like how iBooks Author lets you control whether or not movies must show in full-screen mode. In my case, the movie just played better in full screen.</p>

<p>iBooks Author also provides several export options, including to the iBooks format as in the link above. Apple provides this option for those who want to distribute their iBook outside of the iBooks store. I did not submit the iBook to Apple, but the process looks simple. I also printed the iBook and the output looked just like the book.</p>

<p>Overall, I&#8217;m satisfied with iBooks Author, but I&#8217;m most excited about my son presenting his work tomorrow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[objective-c-literals]]></title>
    <link href="http://statonjr.github.com/blog/2012/03/16/objective-c-literals/"/>
    <updated>2012-03-16T14:09:00-04:00</updated>
    <id>http://statonjr.github.com/blog/2012/03/16/objective-c-literals</id>
    <content type="html"><![CDATA[<p>Mark Dalrymple <a href="http://weblog.bignerdranch.com/?p=398">posts</a> about the new literal syntax in Objective-C. One reason that I prefer MacRuby is Ruby&#8217;s terse syntax for creating literals. With MacRuby, I can create dictionaries the standard Ruby way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">dict</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:foo</span> <span class="o">=&gt;</span> <span class="s2">&quot;bar&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The new literals make creating Objective-C dictionaries (and arrays) easier, but not quite as easy as Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">splunge</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span> <span class="s">@&quot;hi&quot;</span> <span class="o">:</span>  <span class="s">@&quot;bork&quot;</span><span class="p">,</span> <span class="s">@&quot;greeble&quot;</span> <span class="o">:</span>  <span class="s">@&quot;bork&quot;</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not bad and, at first glance, better than the old <code>NSDictionary dictionaryWithObjectsAndKeys:</code>. Check out Mark&#8217;s post for more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[12-factor-app]]></title>
    <link href="http://statonjr.github.com/blog/2012/03/16/12-factor-app/"/>
    <updated>2012-03-16T11:41:00-04:00</updated>
    <id>http://statonjr.github.com/blog/2012/03/16/12-factor-app</id>
    <content type="html"><![CDATA[<p>Richard Schneeman from Heroku will be presenting the <a href="http://www.12factor.net">12 Factor App</a> at the charlotte.rb meeting next Wednesday night at Packard Place. I read through the website and I&#8217;m interested to see how the 12 Factor App compares to how I&#8217;ve architected some of my systems. I&#8217;ve already found a few changes that I should make. I&#8217;m also interested to see how the 12 Factor App differs from an environment like <a href="http://www.torquebox.com">Torquebox</a>, which handles many of these factors for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://statonjr.github.com/blog/2012/03/15/hello-world/"/>
    <updated>2012-03-15T19:49:00-04:00</updated>
    <id>http://statonjr.github.com/blog/2012/03/15/hello-world</id>
    <content type="html"><![CDATA[<p>I write code. I leared to write code at age 10; I wrote BASIC on an Apple IIe. I then moved on to AppleScript, a language that I still use today to boss Mac apps around. At my current job, I write mostly Ruby code, building APIs and other tools for teams inside a large financial institution. While I currently deploy on MRI, I am a big fan of JRuby and I plan to port most of my APIs over to JRuby, so expect several posts on deploying JRuby.</p>

<p>I also write Cocoa and iOS applications for fun and profit. While I write my iOS applications in Objective-C, I write my Cocoa apps with MacRuby. With MacRuby, I get full access to AppKit and Foundation from Ruby, even on the command line, not to mention the ability to create great interfaces in Xcode.</p>

<p>Other languages that I&#8217;m interested in include LISP, Clojure, JavaScript, Factor, and R. I admit that it&#8217;s an eclectic mix, but I trained to be a lawyer, so I never had to learn about functional languages or stack languages. I&#8217;m still baffled my LISP macros, but I vow to conquer them.</p>

<p>My goal for this blog is to contribute what I&#8217;ve learned back to the community. Many people contributed to my success and I hope to return the favor.</p>
]]></content>
  </entry>
  
</feed>
